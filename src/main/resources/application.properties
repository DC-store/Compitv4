spring.datasource.url=jdbc:mysql://localhost:3306/digdream
spring.datasource.username=root
spring.datasource.password=DarshanRaj1@
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# this is to query the db regarding the each and every request 
#spring.jpa.open-in-view = false
spring.jpa.database-platform = org.hibernate.dialect.MySQL55Dialect
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto = update
spring.jpa.show-sql=true
server.port=8082





logging.level.org.springframework.security=DEBUG



# log configuration for product

logging.file.name=/opt/pcrf/var/log/DigDream.log
#logging.pattern.rolling-file-name=/opt/pcrf/var/log/ProvWebServices-%d{yyyy-MM-dd}.%i.log
logging.file.max-size=1MB
logging.file.max-history=30
logging.file.clean-history-on-start=true

server.tomcat.accesslog.enabled=true
server.tomcat.accesslog.suffix=.log
server.tomcat.accesslog.prefix=access_log
server.tomcat.accesslog.file-date-format=.yyyy-MM-dd
#server.tomcat.basedir=/opt/pcrf/var/
server.tomcat.accesslog.directory=log
server.tomcat.accesslog.pattern=common


##multi part file options
spring.servlet.multipart.enabled: true
spring.servlet.multipart.file-size-threshold: 20MB
spring.servlet.multipart.max-file-size: 150MB
spring.servlet.multipart.max-request-size: 100MB


#Use HTTPS: Make sure your application uses HTTPS to encrypt all communication between the client and the server. This helps prevent attackers from intercepting or modifying the JWT.
#
#Use strong encryption: Use strong encryption algorithms (such as HMAC-SHA256 or RSA) to sign and verify the JWT. This helps prevent attackers from tampering with the token or creating fake tokens.
#
#Use short-lived tokens: Set an expiration time on your JWTs to limit the window of opportunity for attackers. Short-lived tokens are more secure because if they are compromised, the attacker will only have access to the protected resource for a limited time.
#
#Don't store sensitive data in JWTs: Only include the minimum amount of information necessary in your JWTs. Avoid including sensitive data such as passwords or credit card numbers, and instead store this information securely on the server.
#
#Use a secure token storage mechanism: If you need to store JWTs on the client (for example, in a cookie or local storage), make sure to use a secure storage mechanism that cannot be accessed by third-party scripts or other applications.
